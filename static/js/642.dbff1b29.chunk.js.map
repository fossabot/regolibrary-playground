{"version":3,"file":"static/js/642.dbff1b29.chunk.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js","../node_modules/monaco-editor/esm/vs/base/common/functional.js","../node_modules/monaco-editor/esm/vs/base/common/lazy.js","../node_modules/monaco-editor/esm/vs/base/common/linkedList.js","../node_modules/monaco-editor/esm/vs/base/common/process.js","../node_modules/monaco-editor/esm/vs/base/common/stopwatch.js","../node_modules/monaco-editor/esm/vs/base/common/uint.js","../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","../node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js","../node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js","../node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js","../node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js","../node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js","../node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js","../node_modules/monaco-editor/esm/vs/nls.js","../node_modules/@babel/runtime/helpers/esm/superPropBase.js","../node_modules/@babel/runtime/helpers/esm/get.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Represents information about a specific difference between two sequences.\n */\nexport class DiffChange {\n    /**\n     * Constructs a new DiffChange with the given sequence information\n     * and content.\n     */\n    constructor(originalStart, originalLength, modifiedStart, modifiedLength) {\n        //Debug.Assert(originalLength > 0 || modifiedLength > 0, \"originalLength and modifiedLength cannot both be <= 0\");\n        this.originalStart = originalStart;\n        this.originalLength = originalLength;\n        this.modifiedStart = modifiedStart;\n        this.modifiedLength = modifiedLength;\n    }\n    /**\n     * The end point (exclusive) of the change in the original sequence.\n     */\n    getOriginalEnd() {\n        return this.originalStart + this.originalLength;\n    }\n    /**\n     * The end point (exclusive) of the change in the modified sequence.\n     */\n    getModifiedEnd() {\n        return this.modifiedStart + this.modifiedLength;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function once(fn) {\n    const _this = this;\n    let didCall = false;\n    let result;\n    return function () {\n        if (didCall) {\n            return result;\n        }\n        didCall = true;\n        result = fn.apply(_this, arguments);\n        return result;\n    };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class Lazy {\n    constructor(executor) {\n        this.executor = executor;\n        this._didRun = false;\n    }\n    /**\n     * True if the lazy value has been resolved.\n     */\n    hasValue() { return this._didRun; }\n    /**\n     * Get the wrapped value.\n     *\n     * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only\n     * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value\n     */\n    getValue() {\n        if (!this._didRun) {\n            try {\n                this._value = this.executor();\n            }\n            catch (err) {\n                this._error = err;\n            }\n            finally {\n                this._didRun = true;\n            }\n        }\n        if (this._error) {\n            throw this._error;\n        }\n        return this._value;\n    }\n    /**\n     * Get the wrapped value without forcing evaluation.\n     */\n    get rawValue() { return this._value; }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass Node {\n    constructor(element) {\n        this.element = element;\n        this.next = Node.Undefined;\n        this.prev = Node.Undefined;\n    }\n}\nNode.Undefined = new Node(undefined);\nexport class LinkedList {\n    constructor() {\n        this._first = Node.Undefined;\n        this._last = Node.Undefined;\n        this._size = 0;\n    }\n    get size() {\n        return this._size;\n    }\n    isEmpty() {\n        return this._first === Node.Undefined;\n    }\n    clear() {\n        let node = this._first;\n        while (node !== Node.Undefined) {\n            const next = node.next;\n            node.prev = Node.Undefined;\n            node.next = Node.Undefined;\n            node = next;\n        }\n        this._first = Node.Undefined;\n        this._last = Node.Undefined;\n        this._size = 0;\n    }\n    unshift(element) {\n        return this._insert(element, false);\n    }\n    push(element) {\n        return this._insert(element, true);\n    }\n    _insert(element, atTheEnd) {\n        const newNode = new Node(element);\n        if (this._first === Node.Undefined) {\n            this._first = newNode;\n            this._last = newNode;\n        }\n        else if (atTheEnd) {\n            // push\n            const oldLast = this._last;\n            this._last = newNode;\n            newNode.prev = oldLast;\n            oldLast.next = newNode;\n        }\n        else {\n            // unshift\n            const oldFirst = this._first;\n            this._first = newNode;\n            newNode.next = oldFirst;\n            oldFirst.prev = newNode;\n        }\n        this._size += 1;\n        let didRemove = false;\n        return () => {\n            if (!didRemove) {\n                didRemove = true;\n                this._remove(newNode);\n            }\n        };\n    }\n    shift() {\n        if (this._first === Node.Undefined) {\n            return undefined;\n        }\n        else {\n            const res = this._first.element;\n            this._remove(this._first);\n            return res;\n        }\n    }\n    pop() {\n        if (this._last === Node.Undefined) {\n            return undefined;\n        }\n        else {\n            const res = this._last.element;\n            this._remove(this._last);\n            return res;\n        }\n    }\n    _remove(node) {\n        if (node.prev !== Node.Undefined && node.next !== Node.Undefined) {\n            // middle\n            const anchor = node.prev;\n            anchor.next = node.next;\n            node.next.prev = anchor;\n        }\n        else if (node.prev === Node.Undefined && node.next === Node.Undefined) {\n            // only node\n            this._first = Node.Undefined;\n            this._last = Node.Undefined;\n        }\n        else if (node.next === Node.Undefined) {\n            // last\n            this._last = this._last.prev;\n            this._last.next = Node.Undefined;\n        }\n        else if (node.prev === Node.Undefined) {\n            // first\n            this._first = this._first.next;\n            this._first.prev = Node.Undefined;\n        }\n        // done\n        this._size -= 1;\n    }\n    *[Symbol.iterator]() {\n        let node = this._first;\n        while (node !== Node.Undefined) {\n            yield node.element;\n            node = node.next;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { globals, isMacintosh, isWindows } from './platform.js';\nlet safeProcess;\n// Native sandbox environment\nif (typeof globals.vscode !== 'undefined' && typeof globals.vscode.process !== 'undefined') {\n    const sandboxProcess = globals.vscode.process;\n    safeProcess = {\n        get platform() { return sandboxProcess.platform; },\n        get arch() { return sandboxProcess.arch; },\n        get env() { return sandboxProcess.env; },\n        cwd() { return sandboxProcess.cwd(); }\n    };\n}\n// Native node.js environment\nelse if (typeof process !== 'undefined') {\n    safeProcess = {\n        get platform() { return process.platform; },\n        get arch() { return process.arch; },\n        get env() { return process.env; },\n        cwd() { return process.env['VSCODE_CWD'] || process.cwd(); }\n    };\n}\n// Web environment\nelse {\n    safeProcess = {\n        // Supported\n        get platform() { return isWindows ? 'win32' : isMacintosh ? 'darwin' : 'linux'; },\n        get arch() { return undefined; /* arch is undefined in web */ },\n        // Unsupported\n        get env() { return {}; },\n        cwd() { return '/'; }\n    };\n}\n/**\n * Provides safe access to the `cwd` property in node.js, sandboxed or web\n * environments.\n *\n * Note: in web, this property is hardcoded to be `/`.\n */\nexport const cwd = safeProcess.cwd;\n/**\n * Provides safe access to the `env` property in node.js, sandboxed or web\n * environments.\n *\n * Note: in web, this property is hardcoded to be `{}`.\n */\nexport const env = safeProcess.env;\n/**\n * Provides safe access to the `platform` property in node.js, sandboxed or web\n * environments.\n */\nexport const platform = safeProcess.platform;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { globals } from './platform.js';\nconst hasPerformanceNow = (globals.performance && typeof globals.performance.now === 'function');\nexport class StopWatch {\n    constructor(highResolution) {\n        this._highResolution = hasPerformanceNow && highResolution;\n        this._startTime = this._now();\n        this._stopTime = -1;\n    }\n    static create(highResolution = true) {\n        return new StopWatch(highResolution);\n    }\n    stop() {\n        this._stopTime = this._now();\n    }\n    elapsed() {\n        if (this._stopTime !== -1) {\n            return this._stopTime - this._startTime;\n        }\n        return this._now() - this._startTime;\n    }\n    _now() {\n        return this._highResolution ? globals.performance.now() : Date.now();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function toUint8(v) {\n    if (v < 0) {\n        return 0;\n    }\n    if (v > 255 /* Constants.MAX_UINT_8 */) {\n        return 255 /* Constants.MAX_UINT_8 */;\n    }\n    return v | 0;\n}\nexport function toUint32(v) {\n    if (v < 0) {\n        return 0;\n    }\n    if (v > 4294967295 /* Constants.MAX_UINT_32 */) {\n        return 4294967295 /* Constants.MAX_UINT_32 */;\n    }\n    return v | 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * A position in the editor.\n */\nexport class Position {\n    constructor(lineNumber, column) {\n        this.lineNumber = lineNumber;\n        this.column = column;\n    }\n    /**\n     * Create a new position from this position.\n     *\n     * @param newLineNumber new line number\n     * @param newColumn new column\n     */\n    with(newLineNumber = this.lineNumber, newColumn = this.column) {\n        if (newLineNumber === this.lineNumber && newColumn === this.column) {\n            return this;\n        }\n        else {\n            return new Position(newLineNumber, newColumn);\n        }\n    }\n    /**\n     * Derive a new position from this position.\n     *\n     * @param deltaLineNumber line number delta\n     * @param deltaColumn column delta\n     */\n    delta(deltaLineNumber = 0, deltaColumn = 0) {\n        return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n    }\n    /**\n     * Test if this position equals other position\n     */\n    equals(other) {\n        return Position.equals(this, other);\n    }\n    /**\n     * Test if position `a` equals position `b`\n     */\n    static equals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        return (!!a &&\n            !!b &&\n            a.lineNumber === b.lineNumber &&\n            a.column === b.column);\n    }\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be false.\n     */\n    isBefore(other) {\n        return Position.isBefore(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be false.\n     */\n    static isBefore(a, b) {\n        if (a.lineNumber < b.lineNumber) {\n            return true;\n        }\n        if (b.lineNumber < a.lineNumber) {\n            return false;\n        }\n        return a.column < b.column;\n    }\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be true.\n     */\n    isBeforeOrEqual(other) {\n        return Position.isBeforeOrEqual(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be true.\n     */\n    static isBeforeOrEqual(a, b) {\n        if (a.lineNumber < b.lineNumber) {\n            return true;\n        }\n        if (b.lineNumber < a.lineNumber) {\n            return false;\n        }\n        return a.column <= b.column;\n    }\n    /**\n     * A function that compares positions, useful for sorting\n     */\n    static compare(a, b) {\n        const aLineNumber = a.lineNumber | 0;\n        const bLineNumber = b.lineNumber | 0;\n        if (aLineNumber === bLineNumber) {\n            const aColumn = a.column | 0;\n            const bColumn = b.column | 0;\n            return aColumn - bColumn;\n        }\n        return aLineNumber - bLineNumber;\n    }\n    /**\n     * Clone this position.\n     */\n    clone() {\n        return new Position(this.lineNumber, this.column);\n    }\n    /**\n     * Convert to a human-readable representation.\n     */\n    toString() {\n        return '(' + this.lineNumber + ',' + this.column + ')';\n    }\n    // ---\n    /**\n     * Create a `Position` from an `IPosition`.\n     */\n    static lift(pos) {\n        return new Position(pos.lineNumber, pos.column);\n    }\n    /**\n     * Test if `obj` is an `IPosition`.\n     */\n    static isIPosition(obj) {\n        return (obj\n            && (typeof obj.lineNumber === 'number')\n            && (typeof obj.column === 'number'));\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './position.js';\n/**\n * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)\n */\nexport class Range {\n    constructor(startLineNumber, startColumn, endLineNumber, endColumn) {\n        if ((startLineNumber > endLineNumber) || (startLineNumber === endLineNumber && startColumn > endColumn)) {\n            this.startLineNumber = endLineNumber;\n            this.startColumn = endColumn;\n            this.endLineNumber = startLineNumber;\n            this.endColumn = startColumn;\n        }\n        else {\n            this.startLineNumber = startLineNumber;\n            this.startColumn = startColumn;\n            this.endLineNumber = endLineNumber;\n            this.endColumn = endColumn;\n        }\n    }\n    /**\n     * Test if this range is empty.\n     */\n    isEmpty() {\n        return Range.isEmpty(this);\n    }\n    /**\n     * Test if `range` is empty.\n     */\n    static isEmpty(range) {\n        return (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn);\n    }\n    /**\n     * Test if position is in this range. If the position is at the edges, will return true.\n     */\n    containsPosition(position) {\n        return Range.containsPosition(this, position);\n    }\n    /**\n     * Test if `position` is in `range`. If the position is at the edges, will return true.\n     */\n    static containsPosition(range, position) {\n        if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {\n            return false;\n        }\n        if (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Test if `position` is in `range`. If the position is at the edges, will return false.\n     * @internal\n     */\n    static strictContainsPosition(range, position) {\n        if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (position.lineNumber === range.startLineNumber && position.column <= range.startColumn) {\n            return false;\n        }\n        if (position.lineNumber === range.endLineNumber && position.column >= range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Test if range is in this range. If the range is equal to this range, will return true.\n     */\n    containsRange(range) {\n        return Range.containsRange(this, range);\n    }\n    /**\n     * Test if `otherRange` is in `range`. If the ranges are equal, will return true.\n     */\n    static containsRange(range, otherRange) {\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {\n            return false;\n        }\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.\n     */\n    strictContainsRange(range) {\n        return Range.strictContainsRange(this, range);\n    }\n    /**\n     * Test if `otherRange` is strictly in `range` (must start after, and end before). If the ranges are equal, will return false.\n     */\n    static strictContainsRange(range, otherRange) {\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn <= range.startColumn) {\n            return false;\n        }\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn >= range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * A reunion of the two ranges.\n     * The smallest position will be used as the start point, and the largest one as the end point.\n     */\n    plusRange(range) {\n        return Range.plusRange(this, range);\n    }\n    /**\n     * A reunion of the two ranges.\n     * The smallest position will be used as the start point, and the largest one as the end point.\n     */\n    static plusRange(a, b) {\n        let startLineNumber;\n        let startColumn;\n        let endLineNumber;\n        let endColumn;\n        if (b.startLineNumber < a.startLineNumber) {\n            startLineNumber = b.startLineNumber;\n            startColumn = b.startColumn;\n        }\n        else if (b.startLineNumber === a.startLineNumber) {\n            startLineNumber = b.startLineNumber;\n            startColumn = Math.min(b.startColumn, a.startColumn);\n        }\n        else {\n            startLineNumber = a.startLineNumber;\n            startColumn = a.startColumn;\n        }\n        if (b.endLineNumber > a.endLineNumber) {\n            endLineNumber = b.endLineNumber;\n            endColumn = b.endColumn;\n        }\n        else if (b.endLineNumber === a.endLineNumber) {\n            endLineNumber = b.endLineNumber;\n            endColumn = Math.max(b.endColumn, a.endColumn);\n        }\n        else {\n            endLineNumber = a.endLineNumber;\n            endColumn = a.endColumn;\n        }\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    /**\n     * A intersection of the two ranges.\n     */\n    intersectRanges(range) {\n        return Range.intersectRanges(this, range);\n    }\n    /**\n     * A intersection of the two ranges.\n     */\n    static intersectRanges(a, b) {\n        let resultStartLineNumber = a.startLineNumber;\n        let resultStartColumn = a.startColumn;\n        let resultEndLineNumber = a.endLineNumber;\n        let resultEndColumn = a.endColumn;\n        const otherStartLineNumber = b.startLineNumber;\n        const otherStartColumn = b.startColumn;\n        const otherEndLineNumber = b.endLineNumber;\n        const otherEndColumn = b.endColumn;\n        if (resultStartLineNumber < otherStartLineNumber) {\n            resultStartLineNumber = otherStartLineNumber;\n            resultStartColumn = otherStartColumn;\n        }\n        else if (resultStartLineNumber === otherStartLineNumber) {\n            resultStartColumn = Math.max(resultStartColumn, otherStartColumn);\n        }\n        if (resultEndLineNumber > otherEndLineNumber) {\n            resultEndLineNumber = otherEndLineNumber;\n            resultEndColumn = otherEndColumn;\n        }\n        else if (resultEndLineNumber === otherEndLineNumber) {\n            resultEndColumn = Math.min(resultEndColumn, otherEndColumn);\n        }\n        // Check if selection is now empty\n        if (resultStartLineNumber > resultEndLineNumber) {\n            return null;\n        }\n        if (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {\n            return null;\n        }\n        return new Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);\n    }\n    /**\n     * Test if this range equals other.\n     */\n    equalsRange(other) {\n        return Range.equalsRange(this, other);\n    }\n    /**\n     * Test if range `a` equals `b`.\n     */\n    static equalsRange(a, b) {\n        return (!!a &&\n            !!b &&\n            a.startLineNumber === b.startLineNumber &&\n            a.startColumn === b.startColumn &&\n            a.endLineNumber === b.endLineNumber &&\n            a.endColumn === b.endColumn);\n    }\n    /**\n     * Return the end position (which will be after or equal to the start position)\n     */\n    getEndPosition() {\n        return Range.getEndPosition(this);\n    }\n    /**\n     * Return the end position (which will be after or equal to the start position)\n     */\n    static getEndPosition(range) {\n        return new Position(range.endLineNumber, range.endColumn);\n    }\n    /**\n     * Return the start position (which will be before or equal to the end position)\n     */\n    getStartPosition() {\n        return Range.getStartPosition(this);\n    }\n    /**\n     * Return the start position (which will be before or equal to the end position)\n     */\n    static getStartPosition(range) {\n        return new Position(range.startLineNumber, range.startColumn);\n    }\n    /**\n     * Transform to a user presentable string representation.\n     */\n    toString() {\n        return '[' + this.startLineNumber + ',' + this.startColumn + ' -> ' + this.endLineNumber + ',' + this.endColumn + ']';\n    }\n    /**\n     * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.\n     */\n    setEndPosition(endLineNumber, endColumn) {\n        return new Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n    }\n    /**\n     * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.\n     */\n    setStartPosition(startLineNumber, startColumn) {\n        return new Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n    }\n    /**\n     * Create a new empty range using this range's start position.\n     */\n    collapseToStart() {\n        return Range.collapseToStart(this);\n    }\n    /**\n     * Create a new empty range using this range's start position.\n     */\n    static collapseToStart(range) {\n        return new Range(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n    }\n    // ---\n    static fromPositions(start, end = start) {\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    static lift(range) {\n        if (!range) {\n            return null;\n        }\n        return new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n    }\n    /**\n     * Test if `obj` is an `IRange`.\n     */\n    static isIRange(obj) {\n        return (obj\n            && (typeof obj.startLineNumber === 'number')\n            && (typeof obj.startColumn === 'number')\n            && (typeof obj.endLineNumber === 'number')\n            && (typeof obj.endColumn === 'number'));\n    }\n    /**\n     * Test if the two ranges are touching in any way.\n     */\n    static areIntersectingOrTouching(a, b) {\n        // Check if `a` is before `b`\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn < b.startColumn)) {\n            return false;\n        }\n        // Check if `b` is before `a`\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn < a.startColumn)) {\n            return false;\n        }\n        // These ranges must intersect\n        return true;\n    }\n    /**\n     * Test if the two ranges are intersecting. If the ranges are touching it returns true.\n     */\n    static areIntersecting(a, b) {\n        // Check if `a` is before `b`\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn <= b.startColumn)) {\n            return false;\n        }\n        // Check if `b` is before `a`\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn <= a.startColumn)) {\n            return false;\n        }\n        // These ranges must intersect\n        return true;\n    }\n    /**\n     * A function that compares ranges, useful for sorting ranges\n     * It will first compare ranges on the startPosition and then on the endPosition\n     */\n    static compareRangesUsingStarts(a, b) {\n        if (a && b) {\n            const aStartLineNumber = a.startLineNumber | 0;\n            const bStartLineNumber = b.startLineNumber | 0;\n            if (aStartLineNumber === bStartLineNumber) {\n                const aStartColumn = a.startColumn | 0;\n                const bStartColumn = b.startColumn | 0;\n                if (aStartColumn === bStartColumn) {\n                    const aEndLineNumber = a.endLineNumber | 0;\n                    const bEndLineNumber = b.endLineNumber | 0;\n                    if (aEndLineNumber === bEndLineNumber) {\n                        const aEndColumn = a.endColumn | 0;\n                        const bEndColumn = b.endColumn | 0;\n                        return aEndColumn - bEndColumn;\n                    }\n                    return aEndLineNumber - bEndLineNumber;\n                }\n                return aStartColumn - bStartColumn;\n            }\n            return aStartLineNumber - bStartLineNumber;\n        }\n        const aExists = (a ? 1 : 0);\n        const bExists = (b ? 1 : 0);\n        return aExists - bExists;\n    }\n    /**\n     * A function that compares ranges, useful for sorting ranges\n     * It will first compare ranges on the endPosition and then on the startPosition\n     */\n    static compareRangesUsingEnds(a, b) {\n        if (a.endLineNumber === b.endLineNumber) {\n            if (a.endColumn === b.endColumn) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.startColumn - b.startColumn;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return a.endColumn - b.endColumn;\n        }\n        return a.endLineNumber - b.endLineNumber;\n    }\n    /**\n     * Test if the range spans multiple lines.\n     */\n    static spansMultipleLines(range) {\n        return range.endLineNumber > range.startLineNumber;\n    }\n    toJSON() {\n        return this;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './position.js';\nimport { Range } from './range.js';\n/**\n * A selection in the editor.\n * The selection is a range that has an orientation.\n */\nexport class Selection extends Range {\n    constructor(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn) {\n        super(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn);\n        this.selectionStartLineNumber = selectionStartLineNumber;\n        this.selectionStartColumn = selectionStartColumn;\n        this.positionLineNumber = positionLineNumber;\n        this.positionColumn = positionColumn;\n    }\n    /**\n     * Transform to a human-readable representation.\n     */\n    toString() {\n        return '[' + this.selectionStartLineNumber + ',' + this.selectionStartColumn + ' -> ' + this.positionLineNumber + ',' + this.positionColumn + ']';\n    }\n    /**\n     * Test if equals other selection.\n     */\n    equalsSelection(other) {\n        return (Selection.selectionsEqual(this, other));\n    }\n    /**\n     * Test if the two selections are equal.\n     */\n    static selectionsEqual(a, b) {\n        return (a.selectionStartLineNumber === b.selectionStartLineNumber &&\n            a.selectionStartColumn === b.selectionStartColumn &&\n            a.positionLineNumber === b.positionLineNumber &&\n            a.positionColumn === b.positionColumn);\n    }\n    /**\n     * Get directions (LTR or RTL).\n     */\n    getDirection() {\n        if (this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn) {\n            return 0 /* SelectionDirection.LTR */;\n        }\n        return 1 /* SelectionDirection.RTL */;\n    }\n    /**\n     * Create a new selection with a different `positionLineNumber` and `positionColumn`.\n     */\n    setEndPosition(endLineNumber, endColumn) {\n        if (this.getDirection() === 0 /* SelectionDirection.LTR */) {\n            return new Selection(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n        }\n        return new Selection(endLineNumber, endColumn, this.startLineNumber, this.startColumn);\n    }\n    /**\n     * Get the position at `positionLineNumber` and `positionColumn`.\n     */\n    getPosition() {\n        return new Position(this.positionLineNumber, this.positionColumn);\n    }\n    /**\n     * Get the position at the start of the selection.\n    */\n    getSelectionStart() {\n        return new Position(this.selectionStartLineNumber, this.selectionStartColumn);\n    }\n    /**\n     * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.\n     */\n    setStartPosition(startLineNumber, startColumn) {\n        if (this.getDirection() === 0 /* SelectionDirection.LTR */) {\n            return new Selection(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n        }\n        return new Selection(this.endLineNumber, this.endColumn, startLineNumber, startColumn);\n    }\n    // ----\n    /**\n     * Create a `Selection` from one or two positions\n     */\n    static fromPositions(start, end = start) {\n        return new Selection(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    /**\n     * Creates a `Selection` from a range, given a direction.\n     */\n    static fromRange(range, direction) {\n        if (direction === 0 /* SelectionDirection.LTR */) {\n            return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n        }\n        else {\n            return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n        }\n    }\n    /**\n     * Create a `Selection` from an `ISelection`.\n     */\n    static liftSelection(sel) {\n        return new Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);\n    }\n    /**\n     * `a` equals `b`.\n     */\n    static selectionsArrEqual(a, b) {\n        if (a && !b || !a && b) {\n            return false;\n        }\n        if (!a && !b) {\n            return true;\n        }\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0, len = a.length; i < len; i++) {\n            if (!this.selectionsEqual(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Test if `obj` is an `ISelection`.\n     */\n    static isISelection(obj) {\n        return (obj\n            && (typeof obj.selectionStartLineNumber === 'number')\n            && (typeof obj.selectionStartColumn === 'number')\n            && (typeof obj.positionLineNumber === 'number')\n            && (typeof obj.positionColumn === 'number'));\n    }\n    /**\n     * Create with a direction.\n     */\n    static createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, direction) {\n        if (direction === 0 /* SelectionDirection.LTR */) {\n            return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        return new Selection(endLineNumber, endColumn, startLineNumber, startColumn);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { KeyChord } from '../../../base/common/keyCodes.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { Token } from '../languages.js';\nimport * as standaloneEnums from '../standalone/standaloneEnums.js';\nexport class KeyMod {\n    static chord(firstPart, secondPart) {\n        return KeyChord(firstPart, secondPart);\n    }\n}\nKeyMod.CtrlCmd = 2048 /* ConstKeyMod.CtrlCmd */;\nKeyMod.Shift = 1024 /* ConstKeyMod.Shift */;\nKeyMod.Alt = 512 /* ConstKeyMod.Alt */;\nKeyMod.WinCtrl = 256 /* ConstKeyMod.WinCtrl */;\nexport function createMonacoBaseAPI() {\n    return {\n        editor: undefined,\n        languages: undefined,\n        CancellationTokenSource: CancellationTokenSource,\n        Emitter: Emitter,\n        KeyCode: standaloneEnums.KeyCode,\n        KeyMod: KeyMod,\n        Position: Position,\n        Range: Range,\n        Selection: Selection,\n        SelectionDirection: standaloneEnums.SelectionDirection,\n        MarkerSeverity: standaloneEnums.MarkerSeverity,\n        MarkerTag: standaloneEnums.MarkerTag,\n        Uri: URI,\n        Token: Token\n    };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LcsDiff } from '../../../base/common/diff/diff.js';\nimport * as strings from '../../../base/common/strings.js';\nconst MINIMUM_MATCHING_CHARACTER_LENGTH = 3;\nfunction computeDiff(originalSequence, modifiedSequence, continueProcessingPredicate, pretty) {\n    const diffAlgo = new LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate);\n    return diffAlgo.ComputeDiff(pretty);\n}\nclass LineSequence {\n    constructor(lines) {\n        const startColumns = [];\n        const endColumns = [];\n        for (let i = 0, length = lines.length; i < length; i++) {\n            startColumns[i] = getFirstNonBlankColumn(lines[i], 1);\n            endColumns[i] = getLastNonBlankColumn(lines[i], 1);\n        }\n        this.lines = lines;\n        this._startColumns = startColumns;\n        this._endColumns = endColumns;\n    }\n    getElements() {\n        const elements = [];\n        for (let i = 0, len = this.lines.length; i < len; i++) {\n            elements[i] = this.lines[i].substring(this._startColumns[i] - 1, this._endColumns[i] - 1);\n        }\n        return elements;\n    }\n    getStrictElement(index) {\n        return this.lines[index];\n    }\n    getStartLineNumber(i) {\n        return i + 1;\n    }\n    getEndLineNumber(i) {\n        return i + 1;\n    }\n    createCharSequence(shouldIgnoreTrimWhitespace, startIndex, endIndex) {\n        const charCodes = [];\n        const lineNumbers = [];\n        const columns = [];\n        let len = 0;\n        for (let index = startIndex; index <= endIndex; index++) {\n            const lineContent = this.lines[index];\n            const startColumn = (shouldIgnoreTrimWhitespace ? this._startColumns[index] : 1);\n            const endColumn = (shouldIgnoreTrimWhitespace ? this._endColumns[index] : lineContent.length + 1);\n            for (let col = startColumn; col < endColumn; col++) {\n                charCodes[len] = lineContent.charCodeAt(col - 1);\n                lineNumbers[len] = index + 1;\n                columns[len] = col;\n                len++;\n            }\n            if (!shouldIgnoreTrimWhitespace && index < endIndex) {\n                // Add \\n if trim whitespace is not ignored\n                charCodes[len] = 10 /* CharCode.LineFeed */;\n                lineNumbers[len] = index + 1;\n                columns[len] = lineContent.length + 1;\n                len++;\n            }\n        }\n        return new CharSequence(charCodes, lineNumbers, columns);\n    }\n}\nclass CharSequence {\n    constructor(charCodes, lineNumbers, columns) {\n        this._charCodes = charCodes;\n        this._lineNumbers = lineNumbers;\n        this._columns = columns;\n    }\n    toString() {\n        return ('[' + this._charCodes.map((s, idx) => (s === 10 /* CharCode.LineFeed */ ? '\\\\n' : String.fromCharCode(s)) + `-(${this._lineNumbers[idx]},${this._columns[idx]})`).join(', ') + ']');\n    }\n    _assertIndex(index, arr) {\n        if (index < 0 || index >= arr.length) {\n            throw new Error(`Illegal index`);\n        }\n    }\n    getElements() {\n        return this._charCodes;\n    }\n    getStartLineNumber(i) {\n        if (i > 0 && i === this._lineNumbers.length) {\n            // the start line number of the element after the last element\n            // is the end line number of the last element\n            return this.getEndLineNumber(i - 1);\n        }\n        this._assertIndex(i, this._lineNumbers);\n        return this._lineNumbers[i];\n    }\n    getEndLineNumber(i) {\n        if (i === -1) {\n            // the end line number of the element before the first element\n            // is the start line number of the first element\n            return this.getStartLineNumber(i + 1);\n        }\n        this._assertIndex(i, this._lineNumbers);\n        if (this._charCodes[i] === 10 /* CharCode.LineFeed */) {\n            return this._lineNumbers[i] + 1;\n        }\n        return this._lineNumbers[i];\n    }\n    getStartColumn(i) {\n        if (i > 0 && i === this._columns.length) {\n            // the start column of the element after the last element\n            // is the end column of the last element\n            return this.getEndColumn(i - 1);\n        }\n        this._assertIndex(i, this._columns);\n        return this._columns[i];\n    }\n    getEndColumn(i) {\n        if (i === -1) {\n            // the end column of the element before the first element\n            // is the start column of the first element\n            return this.getStartColumn(i + 1);\n        }\n        this._assertIndex(i, this._columns);\n        if (this._charCodes[i] === 10 /* CharCode.LineFeed */) {\n            return 1;\n        }\n        return this._columns[i] + 1;\n    }\n}\nclass CharChange {\n    constructor(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn) {\n        this.originalStartLineNumber = originalStartLineNumber;\n        this.originalStartColumn = originalStartColumn;\n        this.originalEndLineNumber = originalEndLineNumber;\n        this.originalEndColumn = originalEndColumn;\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\n        this.modifiedStartColumn = modifiedStartColumn;\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\n        this.modifiedEndColumn = modifiedEndColumn;\n    }\n    static createFromDiffChange(diffChange, originalCharSequence, modifiedCharSequence) {\n        const originalStartLineNumber = originalCharSequence.getStartLineNumber(diffChange.originalStart);\n        const originalStartColumn = originalCharSequence.getStartColumn(diffChange.originalStart);\n        const originalEndLineNumber = originalCharSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n        const originalEndColumn = originalCharSequence.getEndColumn(diffChange.originalStart + diffChange.originalLength - 1);\n        const modifiedStartLineNumber = modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart);\n        const modifiedStartColumn = modifiedCharSequence.getStartColumn(diffChange.modifiedStart);\n        const modifiedEndLineNumber = modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n        const modifiedEndColumn = modifiedCharSequence.getEndColumn(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n        return new CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn);\n    }\n}\nfunction postProcessCharChanges(rawChanges) {\n    if (rawChanges.length <= 1) {\n        return rawChanges;\n    }\n    const result = [rawChanges[0]];\n    let prevChange = result[0];\n    for (let i = 1, len = rawChanges.length; i < len; i++) {\n        const currChange = rawChanges[i];\n        const originalMatchingLength = currChange.originalStart - (prevChange.originalStart + prevChange.originalLength);\n        const modifiedMatchingLength = currChange.modifiedStart - (prevChange.modifiedStart + prevChange.modifiedLength);\n        // Both of the above should be equal, but the continueProcessingPredicate may prevent this from being true\n        const matchingLength = Math.min(originalMatchingLength, modifiedMatchingLength);\n        if (matchingLength < MINIMUM_MATCHING_CHARACTER_LENGTH) {\n            // Merge the current change into the previous one\n            prevChange.originalLength = (currChange.originalStart + currChange.originalLength) - prevChange.originalStart;\n            prevChange.modifiedLength = (currChange.modifiedStart + currChange.modifiedLength) - prevChange.modifiedStart;\n        }\n        else {\n            // Add the current change\n            result.push(currChange);\n            prevChange = currChange;\n        }\n    }\n    return result;\n}\nclass LineChange {\n    constructor(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges) {\n        this.originalStartLineNumber = originalStartLineNumber;\n        this.originalEndLineNumber = originalEndLineNumber;\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\n        this.charChanges = charChanges;\n    }\n    static createFromDiffResult(shouldIgnoreTrimWhitespace, diffChange, originalLineSequence, modifiedLineSequence, continueCharDiff, shouldComputeCharChanges, shouldPostProcessCharChanges) {\n        let originalStartLineNumber;\n        let originalEndLineNumber;\n        let modifiedStartLineNumber;\n        let modifiedEndLineNumber;\n        let charChanges = undefined;\n        if (diffChange.originalLength === 0) {\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart) - 1;\n            originalEndLineNumber = 0;\n        }\n        else {\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart);\n            originalEndLineNumber = originalLineSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n        }\n        if (diffChange.modifiedLength === 0) {\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart) - 1;\n            modifiedEndLineNumber = 0;\n        }\n        else {\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart);\n            modifiedEndLineNumber = modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n        }\n        if (shouldComputeCharChanges && diffChange.originalLength > 0 && diffChange.originalLength < 20 && diffChange.modifiedLength > 0 && diffChange.modifiedLength < 20 && continueCharDiff()) {\n            // Compute character changes for diff chunks of at most 20 lines...\n            const originalCharSequence = originalLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.originalStart, diffChange.originalStart + diffChange.originalLength - 1);\n            const modifiedCharSequence = modifiedLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.modifiedStart, diffChange.modifiedStart + diffChange.modifiedLength - 1);\n            if (originalCharSequence.getElements().length > 0 && modifiedCharSequence.getElements().length > 0) {\n                let rawChanges = computeDiff(originalCharSequence, modifiedCharSequence, continueCharDiff, true).changes;\n                if (shouldPostProcessCharChanges) {\n                    rawChanges = postProcessCharChanges(rawChanges);\n                }\n                charChanges = [];\n                for (let i = 0, length = rawChanges.length; i < length; i++) {\n                    charChanges.push(CharChange.createFromDiffChange(rawChanges[i], originalCharSequence, modifiedCharSequence));\n                }\n            }\n        }\n        return new LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges);\n    }\n}\nexport class DiffComputer {\n    constructor(originalLines, modifiedLines, opts) {\n        this.shouldComputeCharChanges = opts.shouldComputeCharChanges;\n        this.shouldPostProcessCharChanges = opts.shouldPostProcessCharChanges;\n        this.shouldIgnoreTrimWhitespace = opts.shouldIgnoreTrimWhitespace;\n        this.shouldMakePrettyDiff = opts.shouldMakePrettyDiff;\n        this.originalLines = originalLines;\n        this.modifiedLines = modifiedLines;\n        this.original = new LineSequence(originalLines);\n        this.modified = new LineSequence(modifiedLines);\n        this.continueLineDiff = createContinueProcessingPredicate(opts.maxComputationTime);\n        this.continueCharDiff = createContinueProcessingPredicate(opts.maxComputationTime === 0 ? 0 : Math.min(opts.maxComputationTime, 5000)); // never run after 5s for character changes...\n    }\n    computeDiff() {\n        if (this.original.lines.length === 1 && this.original.lines[0].length === 0) {\n            // empty original => fast path\n            if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\n                return {\n                    quitEarly: false,\n                    changes: []\n                };\n            }\n            return {\n                quitEarly: false,\n                changes: [{\n                        originalStartLineNumber: 1,\n                        originalEndLineNumber: 1,\n                        modifiedStartLineNumber: 1,\n                        modifiedEndLineNumber: this.modified.lines.length,\n                        charChanges: [{\n                                modifiedEndColumn: 0,\n                                modifiedEndLineNumber: 0,\n                                modifiedStartColumn: 0,\n                                modifiedStartLineNumber: 0,\n                                originalEndColumn: 0,\n                                originalEndLineNumber: 0,\n                                originalStartColumn: 0,\n                                originalStartLineNumber: 0\n                            }]\n                    }]\n            };\n        }\n        if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\n            // empty modified => fast path\n            return {\n                quitEarly: false,\n                changes: [{\n                        originalStartLineNumber: 1,\n                        originalEndLineNumber: this.original.lines.length,\n                        modifiedStartLineNumber: 1,\n                        modifiedEndLineNumber: 1,\n                        charChanges: [{\n                                modifiedEndColumn: 0,\n                                modifiedEndLineNumber: 0,\n                                modifiedStartColumn: 0,\n                                modifiedStartLineNumber: 0,\n                                originalEndColumn: 0,\n                                originalEndLineNumber: 0,\n                                originalStartColumn: 0,\n                                originalStartLineNumber: 0\n                            }]\n                    }]\n            };\n        }\n        const diffResult = computeDiff(this.original, this.modified, this.continueLineDiff, this.shouldMakePrettyDiff);\n        const rawChanges = diffResult.changes;\n        const quitEarly = diffResult.quitEarly;\n        // The diff is always computed with ignoring trim whitespace\n        // This ensures we get the prettiest diff\n        if (this.shouldIgnoreTrimWhitespace) {\n            const lineChanges = [];\n            for (let i = 0, length = rawChanges.length; i < length; i++) {\n                lineChanges.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, rawChanges[i], this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n            }\n            return {\n                quitEarly: quitEarly,\n                changes: lineChanges\n            };\n        }\n        // Need to post-process and introduce changes where the trim whitespace is different\n        // Note that we are looping starting at -1 to also cover the lines before the first change\n        const result = [];\n        let originalLineIndex = 0;\n        let modifiedLineIndex = 0;\n        for (let i = -1 /* !!!! */, len = rawChanges.length; i < len; i++) {\n            const nextChange = (i + 1 < len ? rawChanges[i + 1] : null);\n            const originalStop = (nextChange ? nextChange.originalStart : this.originalLines.length);\n            const modifiedStop = (nextChange ? nextChange.modifiedStart : this.modifiedLines.length);\n            while (originalLineIndex < originalStop && modifiedLineIndex < modifiedStop) {\n                const originalLine = this.originalLines[originalLineIndex];\n                const modifiedLine = this.modifiedLines[modifiedLineIndex];\n                if (originalLine !== modifiedLine) {\n                    // These lines differ only in trim whitespace\n                    // Check the leading whitespace\n                    {\n                        let originalStartColumn = getFirstNonBlankColumn(originalLine, 1);\n                        let modifiedStartColumn = getFirstNonBlankColumn(modifiedLine, 1);\n                        while (originalStartColumn > 1 && modifiedStartColumn > 1) {\n                            const originalChar = originalLine.charCodeAt(originalStartColumn - 2);\n                            const modifiedChar = modifiedLine.charCodeAt(modifiedStartColumn - 2);\n                            if (originalChar !== modifiedChar) {\n                                break;\n                            }\n                            originalStartColumn--;\n                            modifiedStartColumn--;\n                        }\n                        if (originalStartColumn > 1 || modifiedStartColumn > 1) {\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, 1, originalStartColumn, modifiedLineIndex + 1, 1, modifiedStartColumn);\n                        }\n                    }\n                    // Check the trailing whitespace\n                    {\n                        let originalEndColumn = getLastNonBlankColumn(originalLine, 1);\n                        let modifiedEndColumn = getLastNonBlankColumn(modifiedLine, 1);\n                        const originalMaxColumn = originalLine.length + 1;\n                        const modifiedMaxColumn = modifiedLine.length + 1;\n                        while (originalEndColumn < originalMaxColumn && modifiedEndColumn < modifiedMaxColumn) {\n                            const originalChar = originalLine.charCodeAt(originalEndColumn - 1);\n                            const modifiedChar = originalLine.charCodeAt(modifiedEndColumn - 1);\n                            if (originalChar !== modifiedChar) {\n                                break;\n                            }\n                            originalEndColumn++;\n                            modifiedEndColumn++;\n                        }\n                        if (originalEndColumn < originalMaxColumn || modifiedEndColumn < modifiedMaxColumn) {\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, originalEndColumn, originalMaxColumn, modifiedLineIndex + 1, modifiedEndColumn, modifiedMaxColumn);\n                        }\n                    }\n                }\n                originalLineIndex++;\n                modifiedLineIndex++;\n            }\n            if (nextChange) {\n                // Emit the actual change\n                result.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, nextChange, this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n                originalLineIndex += nextChange.originalLength;\n                modifiedLineIndex += nextChange.modifiedLength;\n            }\n        }\n        return {\n            quitEarly: quitEarly,\n            changes: result\n        };\n    }\n    _pushTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n        if (this._mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn)) {\n            // Merged into previous\n            return;\n        }\n        let charChanges = undefined;\n        if (this.shouldComputeCharChanges) {\n            charChanges = [new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn)];\n        }\n        result.push(new LineChange(originalLineNumber, originalLineNumber, modifiedLineNumber, modifiedLineNumber, charChanges));\n    }\n    _mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n        const len = result.length;\n        if (len === 0) {\n            return false;\n        }\n        const prevChange = result[len - 1];\n        if (prevChange.originalEndLineNumber === 0 || prevChange.modifiedEndLineNumber === 0) {\n            // Don't merge with inserts/deletes\n            return false;\n        }\n        if (prevChange.originalEndLineNumber + 1 === originalLineNumber && prevChange.modifiedEndLineNumber + 1 === modifiedLineNumber) {\n            prevChange.originalEndLineNumber = originalLineNumber;\n            prevChange.modifiedEndLineNumber = modifiedLineNumber;\n            if (this.shouldComputeCharChanges && prevChange.charChanges) {\n                prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));\n            }\n            return true;\n        }\n        return false;\n    }\n}\nfunction getFirstNonBlankColumn(txt, defaultValue) {\n    const r = strings.firstNonWhitespaceIndex(txt);\n    if (r === -1) {\n        return defaultValue;\n    }\n    return r + 1;\n}\nfunction getLastNonBlankColumn(txt, defaultValue) {\n    const r = strings.lastNonWhitespaceIndex(txt);\n    if (r === -1) {\n        return defaultValue;\n    }\n    return r + 2;\n}\nfunction createContinueProcessingPredicate(maximumRuntime) {\n    if (maximumRuntime === 0) {\n        return () => true;\n    }\n    const startTime = Date.now();\n    return () => {\n        return Date.now() - startTime < maximumRuntime;\n    };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { splitLines } from '../../../base/common/strings.js';\nimport { Position } from '../core/position.js';\nimport { PrefixSumComputer } from './prefixSumComputer.js';\nexport class MirrorTextModel {\n    constructor(uri, lines, eol, versionId) {\n        this._uri = uri;\n        this._lines = lines;\n        this._eol = eol;\n        this._versionId = versionId;\n        this._lineStarts = null;\n        this._cachedTextValue = null;\n    }\n    dispose() {\n        this._lines.length = 0;\n    }\n    get version() {\n        return this._versionId;\n    }\n    getText() {\n        if (this._cachedTextValue === null) {\n            this._cachedTextValue = this._lines.join(this._eol);\n        }\n        return this._cachedTextValue;\n    }\n    onEvents(e) {\n        if (e.eol && e.eol !== this._eol) {\n            this._eol = e.eol;\n            this._lineStarts = null;\n        }\n        // Update my lines\n        const changes = e.changes;\n        for (const change of changes) {\n            this._acceptDeleteRange(change.range);\n            this._acceptInsertText(new Position(change.range.startLineNumber, change.range.startColumn), change.text);\n        }\n        this._versionId = e.versionId;\n        this._cachedTextValue = null;\n    }\n    _ensureLineStarts() {\n        if (!this._lineStarts) {\n            const eolLength = this._eol.length;\n            const linesLength = this._lines.length;\n            const lineStartValues = new Uint32Array(linesLength);\n            for (let i = 0; i < linesLength; i++) {\n                lineStartValues[i] = this._lines[i].length + eolLength;\n            }\n            this._lineStarts = new PrefixSumComputer(lineStartValues);\n        }\n    }\n    /**\n     * All changes to a line's text go through this method\n     */\n    _setLineText(lineIndex, newValue) {\n        this._lines[lineIndex] = newValue;\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.setValue(lineIndex, this._lines[lineIndex].length + this._eol.length);\n        }\n    }\n    _acceptDeleteRange(range) {\n        if (range.startLineNumber === range.endLineNumber) {\n            if (range.startColumn === range.endColumn) {\n                // Nothing to delete\n                return;\n            }\n            // Delete text on the affected line\n            this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\n                + this._lines[range.startLineNumber - 1].substring(range.endColumn - 1));\n            return;\n        }\n        // Take remaining text on last line and append it to remaining text on first line\n        this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\n            + this._lines[range.endLineNumber - 1].substring(range.endColumn - 1));\n        // Delete middle lines\n        this._lines.splice(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.removeValues(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        }\n    }\n    _acceptInsertText(position, insertText) {\n        if (insertText.length === 0) {\n            // Nothing to insert\n            return;\n        }\n        const insertLines = splitLines(insertText);\n        if (insertLines.length === 1) {\n            // Inserting text on one line\n            this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\n                + insertLines[0]\n                + this._lines[position.lineNumber - 1].substring(position.column - 1));\n            return;\n        }\n        // Append overflowing text from first line to the end of text to insert\n        insertLines[insertLines.length - 1] += this._lines[position.lineNumber - 1].substring(position.column - 1);\n        // Delete overflowing text from first line and insert text on first line\n        this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\n            + insertLines[0]);\n        // Insert new lines & store lengths\n        const newLengths = new Uint32Array(insertLines.length - 1);\n        for (let i = 1; i < insertLines.length; i++) {\n            this._lines.splice(position.lineNumber + i - 1, 0, insertLines[i]);\n            newLengths[i - 1] = insertLines[i].length + this._eol.length;\n        }\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.insertValues(position.lineNumber, newLengths);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nexport class Uint8Matrix {\n    constructor(rows, cols, defaultValue) {\n        const data = new Uint8Array(rows * cols);\n        for (let i = 0, len = rows * cols; i < len; i++) {\n            data[i] = defaultValue;\n        }\n        this._data = data;\n        this.rows = rows;\n        this.cols = cols;\n    }\n    get(row, col) {\n        return this._data[row * this.cols + col];\n    }\n    set(row, col, value) {\n        this._data[row * this.cols + col] = value;\n    }\n}\nexport class StateMachine {\n    constructor(edges) {\n        let maxCharCode = 0;\n        let maxState = 0 /* State.Invalid */;\n        for (let i = 0, len = edges.length; i < len; i++) {\n            const [from, chCode, to] = edges[i];\n            if (chCode > maxCharCode) {\n                maxCharCode = chCode;\n            }\n            if (from > maxState) {\n                maxState = from;\n            }\n            if (to > maxState) {\n                maxState = to;\n            }\n        }\n        maxCharCode++;\n        maxState++;\n        const states = new Uint8Matrix(maxState, maxCharCode, 0 /* State.Invalid */);\n        for (let i = 0, len = edges.length; i < len; i++) {\n            const [from, chCode, to] = edges[i];\n            states.set(from, chCode, to);\n        }\n        this._states = states;\n        this._maxCharCode = maxCharCode;\n    }\n    nextState(currentState, chCode) {\n        if (chCode < 0 || chCode >= this._maxCharCode) {\n            return 0 /* State.Invalid */;\n        }\n        return this._states.get(currentState, chCode);\n    }\n}\n// State machine for http:// or https:// or file://\nlet _stateMachine = null;\nfunction getStateMachine() {\n    if (_stateMachine === null) {\n        _stateMachine = new StateMachine([\n            [1 /* State.Start */, 104 /* CharCode.h */, 2 /* State.H */],\n            [1 /* State.Start */, 72 /* CharCode.H */, 2 /* State.H */],\n            [1 /* State.Start */, 102 /* CharCode.f */, 6 /* State.F */],\n            [1 /* State.Start */, 70 /* CharCode.F */, 6 /* State.F */],\n            [2 /* State.H */, 116 /* CharCode.t */, 3 /* State.HT */],\n            [2 /* State.H */, 84 /* CharCode.T */, 3 /* State.HT */],\n            [3 /* State.HT */, 116 /* CharCode.t */, 4 /* State.HTT */],\n            [3 /* State.HT */, 84 /* CharCode.T */, 4 /* State.HTT */],\n            [4 /* State.HTT */, 112 /* CharCode.p */, 5 /* State.HTTP */],\n            [4 /* State.HTT */, 80 /* CharCode.P */, 5 /* State.HTTP */],\n            [5 /* State.HTTP */, 115 /* CharCode.s */, 9 /* State.BeforeColon */],\n            [5 /* State.HTTP */, 83 /* CharCode.S */, 9 /* State.BeforeColon */],\n            [5 /* State.HTTP */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */],\n            [6 /* State.F */, 105 /* CharCode.i */, 7 /* State.FI */],\n            [6 /* State.F */, 73 /* CharCode.I */, 7 /* State.FI */],\n            [7 /* State.FI */, 108 /* CharCode.l */, 8 /* State.FIL */],\n            [7 /* State.FI */, 76 /* CharCode.L */, 8 /* State.FIL */],\n            [8 /* State.FIL */, 101 /* CharCode.e */, 9 /* State.BeforeColon */],\n            [8 /* State.FIL */, 69 /* CharCode.E */, 9 /* State.BeforeColon */],\n            [9 /* State.BeforeColon */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */],\n            [10 /* State.AfterColon */, 47 /* CharCode.Slash */, 11 /* State.AlmostThere */],\n            [11 /* State.AlmostThere */, 47 /* CharCode.Slash */, 12 /* State.End */],\n        ]);\n    }\n    return _stateMachine;\n}\nlet _classifier = null;\nfunction getClassifier() {\n    if (_classifier === null) {\n        _classifier = new CharacterClassifier(0 /* CharacterClass.None */);\n        // allow-any-unicode-next-line\n        const FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…';\n        for (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n            _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* CharacterClass.ForceTermination */);\n        }\n        const CANNOT_END_WITH_CHARACTERS = '.,;:';\n        for (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\n            _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2 /* CharacterClass.CannotEndIn */);\n        }\n    }\n    return _classifier;\n}\nexport class LinkComputer {\n    static _createLink(classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\n        // Do not allow to end link in certain characters...\n        let lastIncludedCharIndex = linkEndIndex - 1;\n        do {\n            const chCode = line.charCodeAt(lastIncludedCharIndex);\n            const chClass = classifier.get(chCode);\n            if (chClass !== 2 /* CharacterClass.CannotEndIn */) {\n                break;\n            }\n            lastIncludedCharIndex--;\n        } while (lastIncludedCharIndex > linkBeginIndex);\n        // Handle links enclosed in parens, square brackets and curlys.\n        if (linkBeginIndex > 0) {\n            const charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n            const lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n            if ((charCodeBeforeLink === 40 /* CharCode.OpenParen */ && lastCharCodeInLink === 41 /* CharCode.CloseParen */)\n                || (charCodeBeforeLink === 91 /* CharCode.OpenSquareBracket */ && lastCharCodeInLink === 93 /* CharCode.CloseSquareBracket */)\n                || (charCodeBeforeLink === 123 /* CharCode.OpenCurlyBrace */ && lastCharCodeInLink === 125 /* CharCode.CloseCurlyBrace */)) {\n                // Do not end in ) if ( is before the link start\n                // Do not end in ] if [ is before the link start\n                // Do not end in } if { is before the link start\n                lastIncludedCharIndex--;\n            }\n        }\n        return {\n            range: {\n                startLineNumber: lineNumber,\n                startColumn: linkBeginIndex + 1,\n                endLineNumber: lineNumber,\n                endColumn: lastIncludedCharIndex + 2\n            },\n            url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n        };\n    }\n    static computeLinks(model, stateMachine = getStateMachine()) {\n        const classifier = getClassifier();\n        const result = [];\n        for (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n            const line = model.getLineContent(i);\n            const len = line.length;\n            let j = 0;\n            let linkBeginIndex = 0;\n            let linkBeginChCode = 0;\n            let state = 1 /* State.Start */;\n            let hasOpenParens = false;\n            let hasOpenSquareBracket = false;\n            let inSquareBrackets = false;\n            let hasOpenCurlyBracket = false;\n            while (j < len) {\n                let resetStateMachine = false;\n                const chCode = line.charCodeAt(j);\n                if (state === 13 /* State.Accept */) {\n                    let chClass;\n                    switch (chCode) {\n                        case 40 /* CharCode.OpenParen */:\n                            hasOpenParens = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 41 /* CharCode.CloseParen */:\n                            chClass = (hasOpenParens ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        case 91 /* CharCode.OpenSquareBracket */:\n                            inSquareBrackets = true;\n                            hasOpenSquareBracket = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 93 /* CharCode.CloseSquareBracket */:\n                            inSquareBrackets = false;\n                            chClass = (hasOpenSquareBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        case 123 /* CharCode.OpenCurlyBrace */:\n                            hasOpenCurlyBracket = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 125 /* CharCode.CloseCurlyBrace */:\n                            chClass = (hasOpenCurlyBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        /* The following three rules make it that ' or \" or ` are allowed inside links if the link didn't begin with them */\n                        case 39 /* CharCode.SingleQuote */:\n                            chClass = (linkBeginChCode === 39 /* CharCode.SingleQuote */ ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */);\n                            break;\n                        case 34 /* CharCode.DoubleQuote */:\n                            chClass = (linkBeginChCode === 34 /* CharCode.DoubleQuote */ ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */);\n                            break;\n                        case 96 /* CharCode.BackTick */:\n                            chClass = (linkBeginChCode === 96 /* CharCode.BackTick */ ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */);\n                            break;\n                        case 42 /* CharCode.Asterisk */:\n                            // `*` terminates a link if the link began with `*`\n                            chClass = (linkBeginChCode === 42 /* CharCode.Asterisk */) ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\n                            break;\n                        case 124 /* CharCode.Pipe */:\n                            // `|` terminates a link if the link began with `|`\n                            chClass = (linkBeginChCode === 124 /* CharCode.Pipe */) ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\n                            break;\n                        case 32 /* CharCode.Space */:\n                            // ` ` allow space in between [ and ]\n                            chClass = (inSquareBrackets ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        default:\n                            chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* CharacterClass.ForceTermination */) {\n                        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n                        resetStateMachine = true;\n                    }\n                }\n                else if (state === 12 /* State.End */) {\n                    let chClass;\n                    if (chCode === 91 /* CharCode.OpenSquareBracket */) {\n                        // Allow for the authority part to contain ipv6 addresses which contain [ and ]\n                        hasOpenSquareBracket = true;\n                        chClass = 0 /* CharacterClass.None */;\n                    }\n                    else {\n                        chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* CharacterClass.ForceTermination */) {\n                        resetStateMachine = true;\n                    }\n                    else {\n                        state = 13 /* State.Accept */;\n                    }\n                }\n                else {\n                    state = stateMachine.nextState(state, chCode);\n                    if (state === 0 /* State.Invalid */) {\n                        resetStateMachine = true;\n                    }\n                }\n                if (resetStateMachine) {\n                    state = 1 /* State.Start */;\n                    hasOpenParens = false;\n                    hasOpenSquareBracket = false;\n                    hasOpenCurlyBracket = false;\n                    // Record where the link started\n                    linkBeginIndex = j + 1;\n                    linkBeginChCode = chCode;\n                }\n                j++;\n            }\n            if (state === 13 /* State.Accept */) {\n                result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n            }\n        }\n        return result;\n    }\n}\n/**\n * Returns an array of all links contains in the provided\n * document. *Note* that this operation is computational\n * expensive and should not run in the UI thread.\n */\nexport function computeLinks(model) {\n    if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\n        // Unknown caller!\n        return [];\n    }\n    return LinkComputer.computeLinks(model);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class BasicInplaceReplace {\n    constructor() {\n        this._defaultValueSet = [\n            ['true', 'false'],\n            ['True', 'False'],\n            ['Private', 'Public', 'Friend', 'ReadOnly', 'Partial', 'Protected', 'WriteOnly'],\n            ['public', 'protected', 'private'],\n        ];\n    }\n    navigateValueSet(range1, text1, range2, text2, up) {\n        if (range1 && text1) {\n            const result = this.doNavigateValueSet(text1, up);\n            if (result) {\n                return {\n                    range: range1,\n                    value: result\n                };\n            }\n        }\n        if (range2 && text2) {\n            const result = this.doNavigateValueSet(text2, up);\n            if (result) {\n                return {\n                    range: range2,\n                    value: result\n                };\n            }\n        }\n        return null;\n    }\n    doNavigateValueSet(text, up) {\n        const numberResult = this.numberReplace(text, up);\n        if (numberResult !== null) {\n            return numberResult;\n        }\n        return this.textReplace(text, up);\n    }\n    numberReplace(value, up) {\n        const precision = Math.pow(10, value.length - (value.lastIndexOf('.') + 1));\n        let n1 = Number(value);\n        const n2 = parseFloat(value);\n        if (!isNaN(n1) && !isNaN(n2) && n1 === n2) {\n            if (n1 === 0 && !up) {\n                return null; // don't do negative\n                //\t\t\t} else if(n1 === 9 && up) {\n                //\t\t\t\treturn null; // don't insert 10 into a number\n            }\n            else {\n                n1 = Math.floor(n1 * precision);\n                n1 += up ? precision : -precision;\n                return String(n1 / precision);\n            }\n        }\n        return null;\n    }\n    textReplace(value, up) {\n        return this.valueSetsReplace(this._defaultValueSet, value, up);\n    }\n    valueSetsReplace(valueSets, value, up) {\n        let result = null;\n        for (let i = 0, len = valueSets.length; result === null && i < len; i++) {\n            result = this.valueSetReplace(valueSets[i], value, up);\n        }\n        return result;\n    }\n    valueSetReplace(valueSet, value, up) {\n        let idx = valueSet.indexOf(value);\n        if (idx >= 0) {\n            idx += up ? +1 : -1;\n            if (idx < 0) {\n                idx = valueSet.length - 1;\n            }\n            else {\n                idx %= valueSet.length;\n            }\n            return valueSet[idx];\n        }\n        return null;\n    }\n}\nBasicInplaceReplace.INSTANCE = new BasicInplaceReplace();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { stringDiff } from '../../../base/common/diff/diff.js';\nimport { globals } from '../../../base/common/platform.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { DiffComputer } from '../diff/diffComputer.js';\nimport { MirrorTextModel as BaseMirrorModel } from '../model/mirrorTextModel.js';\nimport { ensureValidWordDefinition, getWordAtText } from '../core/wordHelper.js';\nimport { computeLinks } from '../languages/linkComputer.js';\nimport { BasicInplaceReplace } from '../languages/supports/inplaceReplaceSupport.js';\nimport { createMonacoBaseAPI } from './editorBaseApi.js';\nimport * as types from '../../../base/common/types.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { UnicodeTextModelHighlighter } from './unicodeTextModelHighlighter.js';\n/**\n * @internal\n */\nexport class MirrorModel extends BaseMirrorModel {\n    get uri() {\n        return this._uri;\n    }\n    get eol() {\n        return this._eol;\n    }\n    getValue() {\n        return this.getText();\n    }\n    getLinesContent() {\n        return this._lines.slice(0);\n    }\n    getLineCount() {\n        return this._lines.length;\n    }\n    getLineContent(lineNumber) {\n        return this._lines[lineNumber - 1];\n    }\n    getWordAtPosition(position, wordDefinition) {\n        const wordAtText = getWordAtText(position.column, ensureValidWordDefinition(wordDefinition), this._lines[position.lineNumber - 1], 0);\n        if (wordAtText) {\n            return new Range(position.lineNumber, wordAtText.startColumn, position.lineNumber, wordAtText.endColumn);\n        }\n        return null;\n    }\n    words(wordDefinition) {\n        const lines = this._lines;\n        const wordenize = this._wordenize.bind(this);\n        let lineNumber = 0;\n        let lineText = '';\n        let wordRangesIdx = 0;\n        let wordRanges = [];\n        return {\n            *[Symbol.iterator]() {\n                while (true) {\n                    if (wordRangesIdx < wordRanges.length) {\n                        const value = lineText.substring(wordRanges[wordRangesIdx].start, wordRanges[wordRangesIdx].end);\n                        wordRangesIdx += 1;\n                        yield value;\n                    }\n                    else {\n                        if (lineNumber < lines.length) {\n                            lineText = lines[lineNumber];\n                            wordRanges = wordenize(lineText, wordDefinition);\n                            wordRangesIdx = 0;\n                            lineNumber += 1;\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n            }\n        };\n    }\n    getLineWords(lineNumber, wordDefinition) {\n        const content = this._lines[lineNumber - 1];\n        const ranges = this._wordenize(content, wordDefinition);\n        const words = [];\n        for (const range of ranges) {\n            words.push({\n                word: content.substring(range.start, range.end),\n                startColumn: range.start + 1,\n                endColumn: range.end + 1\n            });\n        }\n        return words;\n    }\n    _wordenize(content, wordDefinition) {\n        const result = [];\n        let match;\n        wordDefinition.lastIndex = 0; // reset lastIndex just to be sure\n        while (match = wordDefinition.exec(content)) {\n            if (match[0].length === 0) {\n                // it did match the empty string\n                break;\n            }\n            result.push({ start: match.index, end: match.index + match[0].length });\n        }\n        return result;\n    }\n    getValueInRange(range) {\n        range = this._validateRange(range);\n        if (range.startLineNumber === range.endLineNumber) {\n            return this._lines[range.startLineNumber - 1].substring(range.startColumn - 1, range.endColumn - 1);\n        }\n        const lineEnding = this._eol;\n        const startLineIndex = range.startLineNumber - 1;\n        const endLineIndex = range.endLineNumber - 1;\n        const resultLines = [];\n        resultLines.push(this._lines[startLineIndex].substring(range.startColumn - 1));\n        for (let i = startLineIndex + 1; i < endLineIndex; i++) {\n            resultLines.push(this._lines[i]);\n        }\n        resultLines.push(this._lines[endLineIndex].substring(0, range.endColumn - 1));\n        return resultLines.join(lineEnding);\n    }\n    offsetAt(position) {\n        position = this._validatePosition(position);\n        this._ensureLineStarts();\n        return this._lineStarts.getPrefixSum(position.lineNumber - 2) + (position.column - 1);\n    }\n    positionAt(offset) {\n        offset = Math.floor(offset);\n        offset = Math.max(0, offset);\n        this._ensureLineStarts();\n        const out = this._lineStarts.getIndexOf(offset);\n        const lineLength = this._lines[out.index].length;\n        // Ensure we return a valid position\n        return {\n            lineNumber: 1 + out.index,\n            column: 1 + Math.min(out.remainder, lineLength)\n        };\n    }\n    _validateRange(range) {\n        const start = this._validatePosition({ lineNumber: range.startLineNumber, column: range.startColumn });\n        const end = this._validatePosition({ lineNumber: range.endLineNumber, column: range.endColumn });\n        if (start.lineNumber !== range.startLineNumber\n            || start.column !== range.startColumn\n            || end.lineNumber !== range.endLineNumber\n            || end.column !== range.endColumn) {\n            return {\n                startLineNumber: start.lineNumber,\n                startColumn: start.column,\n                endLineNumber: end.lineNumber,\n                endColumn: end.column\n            };\n        }\n        return range;\n    }\n    _validatePosition(position) {\n        if (!Position.isIPosition(position)) {\n            throw new Error('bad position');\n        }\n        let { lineNumber, column } = position;\n        let hasChanged = false;\n        if (lineNumber < 1) {\n            lineNumber = 1;\n            column = 1;\n            hasChanged = true;\n        }\n        else if (lineNumber > this._lines.length) {\n            lineNumber = this._lines.length;\n            column = this._lines[lineNumber - 1].length + 1;\n            hasChanged = true;\n        }\n        else {\n            const maxCharacter = this._lines[lineNumber - 1].length + 1;\n            if (column < 1) {\n                column = 1;\n                hasChanged = true;\n            }\n            else if (column > maxCharacter) {\n                column = maxCharacter;\n                hasChanged = true;\n            }\n        }\n        if (!hasChanged) {\n            return position;\n        }\n        else {\n            return { lineNumber, column };\n        }\n    }\n}\n/**\n * @internal\n */\nexport class EditorSimpleWorker {\n    constructor(host, foreignModuleFactory) {\n        this._host = host;\n        this._models = Object.create(null);\n        this._foreignModuleFactory = foreignModuleFactory;\n        this._foreignModule = null;\n    }\n    dispose() {\n        this._models = Object.create(null);\n    }\n    _getModel(uri) {\n        return this._models[uri];\n    }\n    _getModels() {\n        const all = [];\n        Object.keys(this._models).forEach((key) => all.push(this._models[key]));\n        return all;\n    }\n    acceptNewModel(data) {\n        this._models[data.url] = new MirrorModel(URI.parse(data.url), data.lines, data.EOL, data.versionId);\n    }\n    acceptModelChanged(strURL, e) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        const model = this._models[strURL];\n        model.onEvents(e);\n    }\n    acceptRemovedModel(strURL) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        delete this._models[strURL];\n    }\n    computeUnicodeHighlights(url, options, range) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(url);\n            if (!model) {\n                return { ranges: [], hasMore: false, ambiguousCharacterCount: 0, invisibleCharacterCount: 0, nonBasicAsciiCharacterCount: 0 };\n            }\n            return UnicodeTextModelHighlighter.computeUnicodeHighlights(model, options, range);\n        });\n    }\n    // ---- BEGIN diff --------------------------------------------------------------------------\n    computeDiff(originalUrl, modifiedUrl, ignoreTrimWhitespace, maxComputationTime) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const original = this._getModel(originalUrl);\n            const modified = this._getModel(modifiedUrl);\n            if (!original || !modified) {\n                return null;\n            }\n            return EditorSimpleWorker.computeDiff(original, modified, ignoreTrimWhitespace, maxComputationTime);\n        });\n    }\n    static computeDiff(originalTextModel, modifiedTextModel, ignoreTrimWhitespace, maxComputationTime) {\n        const originalLines = originalTextModel.getLinesContent();\n        const modifiedLines = modifiedTextModel.getLinesContent();\n        const diffComputer = new DiffComputer(originalLines, modifiedLines, {\n            shouldComputeCharChanges: true,\n            shouldPostProcessCharChanges: true,\n            shouldIgnoreTrimWhitespace: ignoreTrimWhitespace,\n            shouldMakePrettyDiff: true,\n            maxComputationTime: maxComputationTime\n        });\n        const diffResult = diffComputer.computeDiff();\n        const identical = (diffResult.changes.length > 0 ? false : this._modelsAreIdentical(originalTextModel, modifiedTextModel));\n        return {\n            quitEarly: diffResult.quitEarly,\n            identical: identical,\n            changes: diffResult.changes\n        };\n    }\n    static _modelsAreIdentical(original, modified) {\n        const originalLineCount = original.getLineCount();\n        const modifiedLineCount = modified.getLineCount();\n        if (originalLineCount !== modifiedLineCount) {\n            return false;\n        }\n        for (let line = 1; line <= originalLineCount; line++) {\n            const originalLine = original.getLineContent(line);\n            const modifiedLine = modified.getLineContent(line);\n            if (originalLine !== modifiedLine) {\n                return false;\n            }\n        }\n        return true;\n    }\n    computeMoreMinimalEdits(modelUrl, edits) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return edits;\n            }\n            const result = [];\n            let lastEol = undefined;\n            edits = edits.slice(0).sort((a, b) => {\n                if (a.range && b.range) {\n                    return Range.compareRangesUsingStarts(a.range, b.range);\n                }\n                // eol only changes should go to the end\n                const aRng = a.range ? 0 : 1;\n                const bRng = b.range ? 0 : 1;\n                return aRng - bRng;\n            });\n            for (let { range, text, eol } of edits) {\n                if (typeof eol === 'number') {\n                    lastEol = eol;\n                }\n                if (Range.isEmpty(range) && !text) {\n                    // empty change\n                    continue;\n                }\n                const original = model.getValueInRange(range);\n                text = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n                if (original === text) {\n                    // noop\n                    continue;\n                }\n                // make sure diff won't take too long\n                if (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {\n                    result.push({ range, text });\n                    continue;\n                }\n                // compute diff between original and edit.text\n                const changes = stringDiff(original, text, false);\n                const editOffset = model.offsetAt(Range.lift(range).getStartPosition());\n                for (const change of changes) {\n                    const start = model.positionAt(editOffset + change.originalStart);\n                    const end = model.positionAt(editOffset + change.originalStart + change.originalLength);\n                    const newEdit = {\n                        text: text.substr(change.modifiedStart, change.modifiedLength),\n                        range: { startLineNumber: start.lineNumber, startColumn: start.column, endLineNumber: end.lineNumber, endColumn: end.column }\n                    };\n                    if (model.getValueInRange(newEdit.range) !== newEdit.text) {\n                        result.push(newEdit);\n                    }\n                }\n            }\n            if (typeof lastEol === 'number') {\n                result.push({ eol: lastEol, text: '', range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } });\n            }\n            return result;\n        });\n    }\n    // ---- END minimal edits ---------------------------------------------------------------\n    computeLinks(modelUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return null;\n            }\n            return computeLinks(model);\n        });\n    }\n    textualSuggest(modelUrls, leadingWord, wordDef, wordDefFlags) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const sw = new StopWatch(true);\n            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n            const seen = new Set();\n            outer: for (const url of modelUrls) {\n                const model = this._getModel(url);\n                if (!model) {\n                    continue;\n                }\n                for (const word of model.words(wordDefRegExp)) {\n                    if (word === leadingWord || !isNaN(Number(word))) {\n                        continue;\n                    }\n                    seen.add(word);\n                    if (seen.size > EditorSimpleWorker._suggestionsLimit) {\n                        break outer;\n                    }\n                }\n            }\n            return { words: Array.from(seen), duration: sw.elapsed() };\n        });\n    }\n    // ---- END suggest --------------------------------------------------------------------------\n    //#region -- word ranges --\n    computeWordRanges(modelUrl, range, wordDef, wordDefFlags) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return Object.create(null);\n            }\n            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n            const result = Object.create(null);\n            for (let line = range.startLineNumber; line < range.endLineNumber; line++) {\n                const words = model.getLineWords(line, wordDefRegExp);\n                for (const word of words) {\n                    if (!isNaN(Number(word.word))) {\n                        continue;\n                    }\n                    let array = result[word.word];\n                    if (!array) {\n                        array = [];\n                        result[word.word] = array;\n                    }\n                    array.push({\n                        startLineNumber: line,\n                        startColumn: word.startColumn,\n                        endLineNumber: line,\n                        endColumn: word.endColumn\n                    });\n                }\n            }\n            return result;\n        });\n    }\n    //#endregion\n    navigateValueSet(modelUrl, range, up, wordDef, wordDefFlags) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return null;\n            }\n            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n            if (range.startColumn === range.endColumn) {\n                range = {\n                    startLineNumber: range.startLineNumber,\n                    startColumn: range.startColumn,\n                    endLineNumber: range.endLineNumber,\n                    endColumn: range.endColumn + 1\n                };\n            }\n            const selectionText = model.getValueInRange(range);\n            const wordRange = model.getWordAtPosition({ lineNumber: range.startLineNumber, column: range.startColumn }, wordDefRegExp);\n            if (!wordRange) {\n                return null;\n            }\n            const word = model.getValueInRange(wordRange);\n            const result = BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\n            return result;\n        });\n    }\n    // ---- BEGIN foreign module support --------------------------------------------------------------------------\n    loadForeignModule(moduleId, createData, foreignHostMethods) {\n        const proxyMethodRequest = (method, args) => {\n            return this._host.fhr(method, args);\n        };\n        const foreignHost = types.createProxyObject(foreignHostMethods, proxyMethodRequest);\n        const ctx = {\n            host: foreignHost,\n            getMirrorModels: () => {\n                return this._getModels();\n            }\n        };\n        if (this._foreignModuleFactory) {\n            this._foreignModule = this._foreignModuleFactory(ctx, createData);\n            // static foreing module\n            return Promise.resolve(types.getAllMethodNames(this._foreignModule));\n        }\n        // ESM-comment-begin\n        // \t\treturn new Promise<any>((resolve, reject) => {\n        // \t\t\trequire([moduleId], (foreignModule: { create: IForeignModuleFactory }) => {\n        // \t\t\t\tthis._foreignModule = foreignModule.create(ctx, createData);\n        // \n        // \t\t\t\tresolve(types.getAllMethodNames(this._foreignModule));\n        // \n        // \t\t\t}, reject);\n        // \t\t});\n        // ESM-comment-end\n        // ESM-uncomment-begin\n        return Promise.reject(new Error(`Unexpected usage`));\n        // ESM-uncomment-end\n    }\n    // foreign method request\n    fmr(method, args) {\n        if (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n        }\n        try {\n            return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n}\n// ---- END diff --------------------------------------------------------------------------\n// ---- BEGIN minimal edits ---------------------------------------------------------------\nEditorSimpleWorker._diffLimit = 100000;\n// ---- BEGIN suggest --------------------------------------------------------------------------\nEditorSimpleWorker._suggestionsLimit = 10000;\n/**\n * Called on the worker side\n * @internal\n */\nexport function create(host) {\n    return new EditorSimpleWorker(host, null);\n}\nif (typeof importScripts === 'function') {\n    // Running in a web worker\n    globals.monaco = createMonacoBaseAPI();\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../core/range.js';\nimport { Searcher } from '../model/textModelSearch.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { assertNever } from '../../../base/common/types.js';\nimport { DEFAULT_WORD_REGEXP, getWordAtText } from '../core/wordHelper.js';\nexport class UnicodeTextModelHighlighter {\n    static computeUnicodeHighlights(model, options, range) {\n        const startLine = range ? range.startLineNumber : 1;\n        const endLine = range ? range.endLineNumber : model.getLineCount();\n        const codePointHighlighter = new CodePointHighlighter(options);\n        const candidates = codePointHighlighter.getCandidateCodePoints();\n        let regex;\n        if (candidates === 'allNonBasicAscii') {\n            regex = new RegExp('[^\\\\t\\\\n\\\\r\\\\x20-\\\\x7E]', 'g');\n        }\n        else {\n            regex = new RegExp(`${buildRegExpCharClassExpr(Array.from(candidates))}`, 'g');\n        }\n        const searcher = new Searcher(null, regex);\n        const ranges = [];\n        let hasMore = false;\n        let m;\n        let ambiguousCharacterCount = 0;\n        let invisibleCharacterCount = 0;\n        let nonBasicAsciiCharacterCount = 0;\n        forLoop: for (let lineNumber = startLine, lineCount = endLine; lineNumber <= lineCount; lineNumber++) {\n            const lineContent = model.getLineContent(lineNumber);\n            const lineLength = lineContent.length;\n            // Reset regex to search from the beginning\n            searcher.reset(0);\n            do {\n                m = searcher.next(lineContent);\n                if (m) {\n                    let startIndex = m.index;\n                    let endIndex = m.index + m[0].length;\n                    // Extend range to entire code point\n                    if (startIndex > 0) {\n                        const charCodeBefore = lineContent.charCodeAt(startIndex - 1);\n                        if (strings.isHighSurrogate(charCodeBefore)) {\n                            startIndex--;\n                        }\n                    }\n                    if (endIndex + 1 < lineLength) {\n                        const charCodeBefore = lineContent.charCodeAt(endIndex - 1);\n                        if (strings.isHighSurrogate(charCodeBefore)) {\n                            endIndex++;\n                        }\n                    }\n                    const str = lineContent.substring(startIndex, endIndex);\n                    const word = getWordAtText(startIndex + 1, DEFAULT_WORD_REGEXP, lineContent, 0);\n                    const highlightReason = codePointHighlighter.shouldHighlightNonBasicASCII(str, word ? word.word : null);\n                    if (highlightReason !== 0 /* SimpleHighlightReason.None */) {\n                        if (highlightReason === 3 /* SimpleHighlightReason.Ambiguous */) {\n                            ambiguousCharacterCount++;\n                        }\n                        else if (highlightReason === 2 /* SimpleHighlightReason.Invisible */) {\n                            invisibleCharacterCount++;\n                        }\n                        else if (highlightReason === 1 /* SimpleHighlightReason.NonBasicASCII */) {\n                            nonBasicAsciiCharacterCount++;\n                        }\n                        else {\n                            assertNever(highlightReason);\n                        }\n                        const MAX_RESULT_LENGTH = 1000;\n                        if (ranges.length >= MAX_RESULT_LENGTH) {\n                            hasMore = true;\n                            break forLoop;\n                        }\n                        ranges.push(new Range(lineNumber, startIndex + 1, lineNumber, endIndex + 1));\n                    }\n                }\n            } while (m);\n        }\n        return {\n            ranges,\n            hasMore,\n            ambiguousCharacterCount,\n            invisibleCharacterCount,\n            nonBasicAsciiCharacterCount\n        };\n    }\n    static computeUnicodeHighlightReason(char, options) {\n        const codePointHighlighter = new CodePointHighlighter(options);\n        const reason = codePointHighlighter.shouldHighlightNonBasicASCII(char, null);\n        switch (reason) {\n            case 0 /* SimpleHighlightReason.None */:\n                return null;\n            case 2 /* SimpleHighlightReason.Invisible */:\n                return { kind: 1 /* UnicodeHighlighterReasonKind.Invisible */ };\n            case 3 /* SimpleHighlightReason.Ambiguous */: {\n                const codePoint = char.codePointAt(0);\n                const primaryConfusable = codePointHighlighter.ambiguousCharacters.getPrimaryConfusable(codePoint);\n                const notAmbiguousInLocales = strings.AmbiguousCharacters.getLocales().filter((l) => !strings.AmbiguousCharacters.getInstance(new Set([...options.allowedLocales, l])).isAmbiguous(codePoint));\n                return { kind: 0 /* UnicodeHighlighterReasonKind.Ambiguous */, confusableWith: String.fromCodePoint(primaryConfusable), notAmbiguousInLocales };\n            }\n            case 1 /* SimpleHighlightReason.NonBasicASCII */:\n                return { kind: 2 /* UnicodeHighlighterReasonKind.NonBasicAscii */ };\n        }\n    }\n}\nfunction buildRegExpCharClassExpr(codePoints, flags) {\n    const src = `[${strings.escapeRegExpCharacters(codePoints.map((i) => String.fromCodePoint(i)).join(''))}]`;\n    return src;\n}\nclass CodePointHighlighter {\n    constructor(options) {\n        this.options = options;\n        this.allowedCodePoints = new Set(options.allowedCodePoints);\n        this.ambiguousCharacters = strings.AmbiguousCharacters.getInstance(new Set(options.allowedLocales));\n    }\n    getCandidateCodePoints() {\n        if (this.options.nonBasicASCII) {\n            return 'allNonBasicAscii';\n        }\n        const set = new Set();\n        if (this.options.invisibleCharacters) {\n            for (const cp of strings.InvisibleCharacters.codePoints) {\n                if (!isAllowedInvisibleCharacter(String.fromCodePoint(cp))) {\n                    set.add(cp);\n                }\n            }\n        }\n        if (this.options.ambiguousCharacters) {\n            for (const cp of this.ambiguousCharacters.getConfusableCodePoints()) {\n                set.add(cp);\n            }\n        }\n        for (const cp of this.allowedCodePoints) {\n            set.delete(cp);\n        }\n        return set;\n    }\n    shouldHighlightNonBasicASCII(character, wordContext) {\n        const codePoint = character.codePointAt(0);\n        if (this.allowedCodePoints.has(codePoint)) {\n            return 0 /* SimpleHighlightReason.None */;\n        }\n        if (this.options.nonBasicASCII) {\n            return 1 /* SimpleHighlightReason.NonBasicASCII */;\n        }\n        let hasBasicASCIICharacters = false;\n        let hasNonConfusableNonBasicAsciiCharacter = false;\n        if (wordContext) {\n            for (const char of wordContext) {\n                const codePoint = char.codePointAt(0);\n                const isBasicASCII = strings.isBasicASCII(char);\n                hasBasicASCIICharacters = hasBasicASCIICharacters || isBasicASCII;\n                if (!isBasicASCII &&\n                    !this.ambiguousCharacters.isAmbiguous(codePoint) &&\n                    !strings.InvisibleCharacters.isInvisibleCharacter(codePoint)) {\n                    hasNonConfusableNonBasicAsciiCharacter = true;\n                }\n            }\n        }\n        if (\n        /* Don't allow mixing weird looking characters with ASCII */ !hasBasicASCIICharacters &&\n            /* Is there an obviously weird looking character? */ hasNonConfusableNonBasicAsciiCharacter) {\n            return 0 /* SimpleHighlightReason.None */;\n        }\n        if (this.options.invisibleCharacters) {\n            // TODO check for emojis\n            if (!isAllowedInvisibleCharacter(character) && strings.InvisibleCharacters.isInvisibleCharacter(codePoint)) {\n                return 2 /* SimpleHighlightReason.Invisible */;\n            }\n        }\n        if (this.options.ambiguousCharacters) {\n            if (this.ambiguousCharacters.isAmbiguous(codePoint)) {\n                return 3 /* SimpleHighlightReason.Ambiguous */;\n            }\n        }\n        return 0 /* SimpleHighlightReason.None */;\n    }\n}\nfunction isAllowedInvisibleCharacter(character) {\n    return character === ' ' || character === '\\n' || character === '\\t';\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Emitter } from '../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../base/common/lifecycle.js';\nexport class TokenizationRegistry {\n    constructor() {\n        this._map = new Map();\n        this._factories = new Map();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._colorMap = null;\n    }\n    fire(languages) {\n        this._onDidChange.fire({\n            changedLanguages: languages,\n            changedColorMap: false\n        });\n    }\n    register(language, support) {\n        this._map.set(language, support);\n        this.fire([language]);\n        return toDisposable(() => {\n            if (this._map.get(language) !== support) {\n                return;\n            }\n            this._map.delete(language);\n            this.fire([language]);\n        });\n    }\n    registerFactory(languageId, factory) {\n        var _a;\n        (_a = this._factories.get(languageId)) === null || _a === void 0 ? void 0 : _a.dispose();\n        const myData = new TokenizationSupportFactoryData(this, languageId, factory);\n        this._factories.set(languageId, myData);\n        return toDisposable(() => {\n            const v = this._factories.get(languageId);\n            if (!v || v !== myData) {\n                return;\n            }\n            this._factories.delete(languageId);\n            v.dispose();\n        });\n    }\n    getOrCreate(languageId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // check first if the support is already set\n            const tokenizationSupport = this.get(languageId);\n            if (tokenizationSupport) {\n                return tokenizationSupport;\n            }\n            const factory = this._factories.get(languageId);\n            if (!factory || factory.isResolved) {\n                // no factory or factory.resolve already finished\n                return null;\n            }\n            yield factory.resolve();\n            return this.get(languageId);\n        });\n    }\n    get(language) {\n        return (this._map.get(language) || null);\n    }\n    isResolved(languageId) {\n        const tokenizationSupport = this.get(languageId);\n        if (tokenizationSupport) {\n            return true;\n        }\n        const factory = this._factories.get(languageId);\n        if (!factory || factory.isResolved) {\n            return true;\n        }\n        return false;\n    }\n    setColorMap(colorMap) {\n        this._colorMap = colorMap;\n        this._onDidChange.fire({\n            changedLanguages: Array.from(this._map.keys()),\n            changedColorMap: true\n        });\n    }\n    getColorMap() {\n        return this._colorMap;\n    }\n    getDefaultBackground() {\n        if (this._colorMap && this._colorMap.length > 2 /* ColorId.DefaultBackground */) {\n            return this._colorMap[2 /* ColorId.DefaultBackground */];\n        }\n        return null;\n    }\n}\nclass TokenizationSupportFactoryData extends Disposable {\n    constructor(_registry, _languageId, _factory) {\n        super();\n        this._registry = _registry;\n        this._languageId = _languageId;\n        this._factory = _factory;\n        this._isDisposed = false;\n        this._resolvePromise = null;\n        this._isResolved = false;\n    }\n    get isResolved() {\n        return this._isResolved;\n    }\n    dispose() {\n        this._isDisposed = true;\n        super.dispose();\n    }\n    resolve() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._resolvePromise) {\n                this._resolvePromise = this._create();\n            }\n            return this._resolvePromise;\n        });\n    }\n    _create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const value = yield Promise.resolve(this._factory.createTokenizationSupport());\n            this._isResolved = true;\n            if (value && !this._isDisposed) {\n                this._register(this._registry.register(this._languageId, value));\n            }\n        });\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nlet isPseudo = (typeof document !== 'undefined' && document.location && document.location.hash.indexOf('pseudo=true') >= 0);\nconst DEFAULT_TAG = 'i-default';\nfunction _format(message, args) {\n    let result;\n    if (args.length === 0) {\n        result = message;\n    }\n    else {\n        result = message.replace(/\\{(\\d+)\\}/g, (match, rest) => {\n            const index = rest[0];\n            const arg = args[index];\n            let result = match;\n            if (typeof arg === 'string') {\n                result = arg;\n            }\n            else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {\n                result = String(arg);\n            }\n            return result;\n        });\n    }\n    if (isPseudo) {\n        // FF3B and FF3D is the Unicode zenkaku representation for [ and ]\n        result = '\\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\n    }\n    return result;\n}\nfunction findLanguageForModule(config, name) {\n    let result = config[name];\n    if (result) {\n        return result;\n    }\n    result = config['*'];\n    if (result) {\n        return result;\n    }\n    return null;\n}\nfunction endWithSlash(path) {\n    if (path.charAt(path.length - 1) === '/') {\n        return path;\n    }\n    return path + '/';\n}\nfunction getMessagesFromTranslationsService(translationServiceUrl, language, name) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const url = endWithSlash(translationServiceUrl) + endWithSlash(language) + 'vscode/' + endWithSlash(name);\n        const res = yield fetch(url);\n        if (res.ok) {\n            const messages = yield res.json();\n            return messages;\n        }\n        throw new Error(`${res.status} - ${res.statusText}`);\n    });\n}\nfunction createScopedLocalize(scope) {\n    return function (idx, defaultValue) {\n        const restArgs = Array.prototype.slice.call(arguments, 2);\n        return _format(scope[idx], restArgs);\n    };\n}\nexport function localize(data, message, ...args) {\n    return _format(message, args);\n}\nexport function getConfiguredDefaultLocale(_) {\n    // This returns undefined because this implementation isn't used and is overwritten by the loader\n    // when loaded.\n    return undefined;\n}\nexport function setPseudoTranslation(value) {\n    isPseudo = value;\n}\n/**\n * Invoked in a built product at run-time\n */\nexport function create(key, data) {\n    var _a;\n    return {\n        localize: createScopedLocalize(data[key]),\n        getConfiguredDefaultLocale: (_a = data.getConfiguredDefaultLocale) !== null && _a !== void 0 ? _a : ((_) => undefined)\n    };\n}\n/**\n * Invoked by the loader at run-time\n */\nexport function load(name, req, load, config) {\n    var _a;\n    const pluginConfig = (_a = config['vs/nls']) !== null && _a !== void 0 ? _a : {};\n    if (!name || name.length === 0) {\n        return load({\n            localize: localize,\n            getConfiguredDefaultLocale: () => { var _a; return (_a = pluginConfig.availableLanguages) === null || _a === void 0 ? void 0 : _a['*']; }\n        });\n    }\n    const language = pluginConfig.availableLanguages ? findLanguageForModule(pluginConfig.availableLanguages, name) : null;\n    const useDefaultLanguage = language === null || language === DEFAULT_TAG;\n    let suffix = '.nls';\n    if (!useDefaultLanguage) {\n        suffix = suffix + '.' + language;\n    }\n    const messagesLoaded = (messages) => {\n        if (Array.isArray(messages)) {\n            messages.localize = createScopedLocalize(messages);\n        }\n        else {\n            messages.localize = createScopedLocalize(messages[name]);\n        }\n        messages.getConfiguredDefaultLocale = () => { var _a; return (_a = pluginConfig.availableLanguages) === null || _a === void 0 ? void 0 : _a['*']; };\n        load(messages);\n    };\n    if (typeof pluginConfig.loadBundle === 'function') {\n        pluginConfig.loadBundle(name, language, (err, messages) => {\n            // We have an error. Load the English default strings to not fail\n            if (err) {\n                req([name + '.nls'], messagesLoaded);\n            }\n            else {\n                messagesLoaded(messages);\n            }\n        });\n    }\n    else if (pluginConfig.translationServiceUrl && !useDefaultLanguage) {\n        (() => __awaiter(this, void 0, void 0, function* () {\n            var _b;\n            try {\n                const messages = yield getMessagesFromTranslationsService(pluginConfig.translationServiceUrl, language, name);\n                return messagesLoaded(messages);\n            }\n            catch (err) {\n                // Language is already as generic as it gets, so require default messages\n                if (!language.includes('-')) {\n                    console.error(err);\n                    return req([name + '.nls'], messagesLoaded);\n                }\n                try {\n                    // Since there is a dash, the language configured is a specific sub-language of the same generic language.\n                    // Since we were unable to load the specific language, try to load the generic language. Ex. we failed to find a\n                    // Swiss German (de-CH), so try to load the generic German (de) messages instead.\n                    const genericLanguage = language.split('-')[0];\n                    const messages = yield getMessagesFromTranslationsService(pluginConfig.translationServiceUrl, genericLanguage, name);\n                    // We got some messages, so we configure the configuration to use the generic language for this session.\n                    (_b = pluginConfig.availableLanguages) !== null && _b !== void 0 ? _b : (pluginConfig.availableLanguages = {});\n                    pluginConfig.availableLanguages['*'] = genericLanguage;\n                    return messagesLoaded(messages);\n                }\n                catch (err) {\n                    console.error(err);\n                    return req([name + '.nls'], messagesLoaded);\n                }\n            }\n        }))();\n    }\n    else {\n        req([name + suffix], messagesLoaded, (err) => {\n            if (suffix === '.nls') {\n                console.error('Failed trying to load default language strings', err);\n                return;\n            }\n            console.error(`Failed to load message bundle for language ${language}. Falling back to the default language:`, err);\n            req([name + '.nls'], messagesLoaded);\n        });\n    }\n}\n","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}"],"names":["DiffChange","originalStart","originalLength","modifiedStart","modifiedLength","this","once","fn","result","_this","didCall","apply","arguments","Lazy","executor","_didRun","_value","err","_error","Node","element","next","Undefined","prev","undefined","LinkedList","_first","_last","_size","node","_insert","atTheEnd","newNode","oldLast","oldFirst","didRemove","_remove","res","anchor","Symbol","iterator","safeProcess","globals","sandboxProcess","platform","arch","env","cwd","process","isWindows","isMacintosh","hasPerformanceNow","StopWatch","highResolution","_highResolution","_startTime","_now","_stopTime","Date","now","toUint8","v","toUint32","Position","lineNumber","column","newLineNumber","newColumn","deltaLineNumber","deltaColumn","with","other","equals","isBefore","isBeforeOrEqual","a","b","aLineNumber","bLineNumber","pos","obj","Range","startLineNumber","startColumn","endLineNumber","endColumn","isEmpty","position","containsPosition","range","containsRange","strictContainsRange","plusRange","intersectRanges","equalsRange","getEndPosition","getStartPosition","collapseToStart","otherRange","Math","min","max","resultStartLineNumber","resultStartColumn","resultEndLineNumber","resultEndColumn","otherStartLineNumber","otherStartColumn","otherEndLineNumber","otherEndColumn","start","end","aStartLineNumber","bStartLineNumber","aStartColumn","bStartColumn","aEndLineNumber","bEndLineNumber","Selection","selectionStartLineNumber","selectionStartColumn","positionLineNumber","positionColumn","selectionsEqual","getDirection","direction","sel","length","i","len","KeyMod","firstPart","secondPart","KeyChord","createMonacoBaseAPI","editor","languages","CancellationTokenSource","Emitter","KeyCode","standaloneEnums","SelectionDirection","MarkerSeverity","MarkerTag","Uri","URI","Token","CtrlCmd","Shift","Alt","WinCtrl","computeDiff","originalSequence","modifiedSequence","continueProcessingPredicate","pretty","LcsDiff","ComputeDiff","LineSequence","lines","startColumns","endColumns","getFirstNonBlankColumn","getLastNonBlankColumn","_startColumns","_endColumns","elements","substring","index","shouldIgnoreTrimWhitespace","startIndex","endIndex","charCodes","lineNumbers","columns","lineContent","col","charCodeAt","CharSequence","_charCodes","_lineNumbers","_columns","map","s","idx","String","fromCharCode","join","arr","Error","getEndLineNumber","_assertIndex","getStartLineNumber","getEndColumn","getStartColumn","CharChange","originalStartLineNumber","originalStartColumn","originalEndLineNumber","originalEndColumn","modifiedStartLineNumber","modifiedStartColumn","modifiedEndLineNumber","modifiedEndColumn","diffChange","originalCharSequence","modifiedCharSequence","LineChange","charChanges","originalLineSequence","modifiedLineSequence","continueCharDiff","shouldComputeCharChanges","shouldPostProcessCharChanges","createCharSequence","getElements","rawChanges","changes","prevChange","currChange","originalMatchingLength","modifiedMatchingLength","push","postProcessCharChanges","createFromDiffChange","DiffComputer","originalLines","modifiedLines","opts","shouldMakePrettyDiff","original","modified","continueLineDiff","createContinueProcessingPredicate","maxComputationTime","quitEarly","diffResult","lineChanges","createFromDiffResult","originalLineIndex","modifiedLineIndex","nextChange","originalStop","modifiedStop","originalLine","modifiedLine","_pushTrimWhitespaceCharChange","originalMaxColumn","modifiedMaxColumn","originalLineNumber","modifiedLineNumber","_mergeTrimWhitespaceCharChange","txt","defaultValue","r","strings","maximumRuntime","startTime","MirrorTextModel","uri","eol","versionId","_uri","_lines","_eol","_versionId","_lineStarts","_cachedTextValue","e","change","_acceptDeleteRange","_acceptInsertText","text","eolLength","linesLength","lineStartValues","Uint32Array","PrefixSumComputer","lineIndex","newValue","setValue","_setLineText","splice","removeValues","insertText","insertLines","splitLines","newLengths","insertValues","Uint8Matrix","rows","cols","data","Uint8Array","_data","row","value","StateMachine","edges","maxCharCode","maxState","from","chCode","to","states","set","_states","_maxCharCode","currentState","get","_stateMachine","getStateMachine","_classifier","getClassifier","CharacterClassifier","FORCE_TERMINATION_CHARACTERS","CANNOT_END_WITH_CHARACTERS","LinkComputer","classifier","line","linkBeginIndex","linkEndIndex","lastIncludedCharIndex","charCodeBeforeLink","lastCharCodeInLink","url","model","stateMachine","lineCount","getLineCount","getLineContent","j","linkBeginChCode","state","hasOpenParens","hasOpenSquareBracket","inSquareBrackets","hasOpenCurlyBracket","resetStateMachine","chClass","_createLink","nextState","computeLinks","BasicInplaceReplace","_defaultValueSet","range1","text1","range2","text2","up","doNavigateValueSet","numberResult","numberReplace","textReplace","precision","pow","lastIndexOf","n1","Number","n2","parseFloat","isNaN","floor","valueSetsReplace","valueSets","valueSetReplace","valueSet","indexOf","INSTANCE","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","rejected","done","then","MirrorModel","getText","slice","wordDefinition","wordAtText","getWordAtText","ensureValidWordDefinition","wordenize","_wordenize","bind","lineText","wordRangesIdx","wordRanges","content","ranges","words","word","match","lastIndex","exec","_validateRange","lineEnding","startLineIndex","endLineIndex","resultLines","_validatePosition","_ensureLineStarts","getPrefixSum","offset","out","getIndexOf","lineLength","remainder","hasChanged","maxCharacter","BaseMirrorModel","EditorSimpleWorker","host","foreignModuleFactory","_host","_models","Object","create","_foreignModuleFactory","_foreignModule","all","keys","forEach","key","EOL","strURL","onEvents","options","_getModel","hasMore","ambiguousCharacterCount","invisibleCharacterCount","nonBasicAsciiCharacterCount","UnicodeTextModelHighlighter","originalUrl","modifiedUrl","ignoreTrimWhitespace","modelUrl","edits","lastEol","sort","getValueInRange","replace","_diffLimit","stringDiff","editOffset","offsetAt","positionAt","newEdit","substr","modelUrls","leadingWord","wordDef","wordDefFlags","sw","wordDefRegExp","RegExp","seen","Set","add","size","_suggestionsLimit","Array","duration","elapsed","getLineWords","array","selectionText","wordRange","getWordAtPosition","navigateValueSet","moduleId","createData","foreignHostMethods","ctx","types","method","args","fhr","getMirrorModels","_getModels","originalTextModel","modifiedTextModel","getLinesContent","identical","_modelsAreIdentical","originalLineCount","importScripts","regex","codePoints","startLine","endLine","codePointHighlighter","CodePointHighlighter","candidates","getCandidateCodePoints","fromCodePoint","m","searcher","Searcher","forLoop","reset","charCodeBefore","str","DEFAULT_WORD_REGEXP","highlightReason","shouldHighlightNonBasicASCII","assertNever","char","kind","codePoint","codePointAt","primaryConfusable","ambiguousCharacters","getPrimaryConfusable","notAmbiguousInLocales","filter","l","allowedLocales","isAmbiguous","confusableWith","allowedCodePoints","nonBasicASCII","invisibleCharacters","cp","isAllowedInvisibleCharacter","getConfusableCodePoints","delete","character","wordContext","has","hasBasicASCIICharacters","hasNonConfusableNonBasicAsciiCharacter","isBasicASCII","TokenizationRegistry","_map","Map","_factories","_onDidChange","onDidChange","event","_colorMap","fire","changedLanguages","changedColorMap","language","support","toDisposable","languageId","factory","_a","dispose","myData","TokenizationSupportFactoryData","tokenizationSupport","isResolved","colorMap","_registry","_languageId","_factory","_isDisposed","_resolvePromise","_isResolved","_create","createTokenizationSupport","_register","register","Disposable","isPseudo","document","location","hash","_format","message","rest","arg","localize","getConfiguredDefaultLocale","_","_superPropBase","object","property","prototype","hasOwnProperty","call","getPrototypeOf","_get","Reflect","target","receiver","base","desc","getOwnPropertyDescriptor"],"sourceRoot":""}